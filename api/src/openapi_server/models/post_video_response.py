# coding: utf-8

"""
MuSP API

MuSPは、YouTubeリンクから音源をダウンロードし、Demucsで音源とボーカルを分離するWebアプリです。 本API仕様書は、ジョブの作成、状態確認、分離済み音源の取得を提供します。

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List

from pydantic import (
    BaseModel,
    Field,
    StrictInt,
    field_validator,
)
from typing_extensions import Annotated

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class PostVideoResponse(BaseModel):
    """
    PostVideoResponse
    """  # noqa: E501

    status_code: StrictInt = Field(
        description="ステータスコード"
    )
    status_message: Annotated[str, Field(strict=True)] = (
        Field(description="ステータスメッセージ")
    )
    youtube_id: Annotated[str, Field(strict=True)] = Field(
        description="YouTubeの動画ID"
    )
    __properties: ClassVar[List[str]] = [
        "status_code",
        "status_message",
        "youtube_id",
    ]

    @field_validator("youtube_id")
    def youtube_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{11}$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z0-9_-]{11}$/"
            )
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(
            self.model_dump(by_alias=True)
        )

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PostVideoResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PostVideoResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "status_code": obj.get("status_code"),
                "status_message": obj.get("status_message"),
                "youtube_id": obj.get("youtube_id"),
            }
        )
        return _obj
