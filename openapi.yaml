openapi: 3.0.0
info:
  title: MuSP API
  version: "1.0.0"
  description: |
    MuSPは、YouTubeリンクから音源をダウンロードし、Demucsで音源とボーカルを分離するWebアプリです。
    本API仕様書は、ジョブの作成、状態確認、分離済み音源の取得を提供します。
servers:
  - url: http://localhost:8000
security:
  - ApiKeyAuth: []

tags:
  - name: GET
    description: 取得関係
  - name: POST
    description: 作成関係
paths:
  /video:
    post:
      tags:
        - POST
      summary: 新規ジョブの作成
      description: YouTubeリンクを元に音源のダウンロードと音源/ボーカル分離のジョブを作成します。
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostVideoRequest"
      responses:
        "200":
          description: そのvideoは既に登録されています
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostVideoResponse"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse400"
  /{user_id}:
    get:
      tags:
        - GET
      summary: ユーザーのYouTubeIDとWavURLの一覧取得
      description: ユーザーが作成したYouTubeIDとWavURLの一覧を取得します。
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: "#/components/parameters/UserID"
      responses:
        "200":
          description: ユーザーのYouTubeIDとWavURLの一覧を取得しました
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetVideoIDAndWavURLResponse"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse400"
  /users:
    post:
      tags:
        - POST
      summary: ユーザー情報の登録
      description: ユーザー情報を登録します。
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostUserRequest"
      responses:
        "200":
          description: ユーザーが存在します
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostUserResponse"
        "400":
          description: 不正なリクエスト
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse400"

components:
  parameters:
    UserID:
      name: user_id
      in: path
      description: ユーザーID
      required: true
      schema:
        type: string
        maximum: 100
      example: testUser
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    PostVideoRequest:
      type: object
      example:
        user_id: "testUser"
        youtube_url: "https://www.youtube.com/watch?v=57Q4Hp46oXc"
      properties:
        user_id:
          type: string
          description: ユーザーID
          maximum: 100
        youtube_url:
          type: string
          description: YouTubeの動画リンク
          pattern: /^(?:https?://)?(?:www\.)?(?:youtube\.com/(?:watch\?.*v=|embed/|v/)|youtu\.be/)([a-zA-Z0-9_-]{11})/
          maximum: 100
      required:
        - user_id
        - youtube_url
      additionalProperties: false
    PostVideoResponse:
      type: object
      example:
        status_code: 200
        status_message: "そのvideoは既に登録されています"
        youtube_id: "57Q4Hp46oXc"
      properties:
        status_code:
          type: integer
          description: ステータスコード
        status_message:
          type: string
          description: ステータスメッセージ
          maximum: 500
        youtube_id:
          type: string
          description: YouTubeの動画ID
          pattern: ^[a-zA-Z0-9_-]{11}$
          maximum: 11
      required:
        - status_code
        - status_message
        - youtube_id
      additionalProperties: false
    VideoIDAndWavURL:
      type: object
      properties:
        youtube_id:
          type: string
          description: YouTubeの動画ID
          pattern: ^[a-zA-Z0-9_-]{11}$
          maximum: 11
        wav_url:
          type: string
          format: uri
          description: 分離済み音源のURL
          maximum: 200
      required:
        - youtube_id
      additionalProperties: false
    GetVideoIDAndWavURLResponse:
      type: object
      example:
        status_code: 200
        status_message: "ユーザーのYouTubeIDとWavURLの一覧を取得しました"
        data:
          - youtube_id: "57Q4Hp46oXc"
            wav_url: "https://example.com/wav.wav"
          - youtube_id: "57Q4Hp46oXc"
            wav_url: null
      properties:
        status_code:
          type: integer
          description: ステータスコード
        status_message:
          type: string
          description: ステータスメッセージ
          maximum: 500
        data:
          type: array
          items:
            $ref: "#/components/schemas/VideoIDAndWavURL"
      required:
        - status_code
        - status_message
        - data
      additionalProperties: false
    PostUserRequest:
      type: object
      example:
        google_id: "testGoogleID"
      properties:
        google_id:
          type: string
          description: GoogleのユーザーID
          maximum: 100
      required:
        - google_id
      additionalProperties: false
    PostUserResponse:
      type: object
      example:
        status_code: 200
        status_message: "ユーザーが存在します"
        user_id: "testUser"
      properties:
        status_code:
          type: integer
          description: ステータスコード
        status_message:
          type: string
          description: ステータスメッセージ
          maximum: 500
        user_id:
          type: string
          description: ユーザーID
          maximum: 100
      required:
        - status_code
        - status_message
        - user_id
      additionalProperties: false
    ErrorResponse400:
      type: object
      properties:
        error:
          type: string
          description: エラーメッセージ
          maximum: 500
      required:
        - error
      additionalProperties: false
